Το Dictionary<TKey, TValue> είναι μια από τις πιο χρήσιμες και δυναμικές δομές δεδομένων στην C#. Ας εξετάσουμε πιο αναλυτικά τη λειτουργία και τις χρήσεις του, καθώς και πώς μπορεί να χρησιμοποιηθεί στην πράξη.
Τι είναι το Dictionary<TKey, TValue>;

Το Dictionary<TKey, TValue> είναι μια συλλογή που αποθηκεύει τα δεδομένα σε ζεύγη κλειδιού-τιμής. Κάθε στοιχείο στο λεξικό αντιστοιχίζεται σε ένα μοναδικό κλειδί,
το οποίο χρησιμοποιείται για να ανακτήσετε την τιμή που είναι συνδεδεμένη με αυτό το κλειδί. Τα κλειδιά είναι μοναδικά σε κάθε λεξικό, αλλά οι τιμές δεν χρειάζεται να είναι.
Πώς λειτουργεί;

Τα Dictionary<TKey, TValue> στην C# χρησιμοποιούν τη δομή δεδομένων του "hash table" για να αποθηκεύσουν τα ζεύγη κλειδιού-τιμής. 
Όταν προσθέτετε ένα ζεύγος στο λεξικό, το κλειδί υποβάλλεται σε μια hash function για να υπολογίσει ένα hash code, το οποίο καθορίζει πού αποθηκεύεται το ζεύγος στη δομή. 
Αυτό επιτρέπει την πολύ γρήγορη ανάκτηση της τιμής βάσει του κλειδιού.

using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        // Δημιουργία νέου Dictionary
        Dictionary<string, int> ages = new Dictionary<string, int>();

        // Προσθήκη στοιχείων
        ages.Add("Maria", 30);
        ages.Add("John", 25);
        ages.Add("Dimitris", 28);

        // Ανάκτηση τιμής με κλειδί
        int ageOfMaria = ages["Maria"];
        Console.WriteLine("Maria is " + ageOfMaria + " years old.");

        // Ελέγχος για την ύπαρξη κλειδιού
        if (ages.ContainsKey("John"))
        {
            Console.WriteLine("John is in the dictionary.");
        }

        // Διαγραφή κλειδιού
        ages.Remove("John");

        // Εμφάνιση όλων των κλειδιών και τιμών
        foreach (KeyValuePair<string, int> kvp in ages)
        {
            Console.WriteLine("Key: " + kvp.Key + ", Value: " + kvp.Value);
        }
    }
}


Τα λεξικά είναι ιδιαίτερα χρήσιμα σε εφαρμογές όπου χρειάζεται γρήγορη ανάκτηση δεδομένων βάσει κλειδιών, όπως σε βάσεις δεδομένων που δεν υποστηρίζουν SQL,
συστήματα caching, αντιστοίχιση αναγνωριστικών σε αντικείμενα και πολλές άλλες εφαρμογές. Η ικανότητά τους να εισάγουν, να ανακτούν και να διαγράφουν στοιχεία σε σταθερό χρόνο τα καθιστά ιδιαίτερα αποδοτικά.


